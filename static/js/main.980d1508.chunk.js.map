{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","redux/TaskReducer.ts","redux/TodoListReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyPress","charCode","onBlur","className","size","style","lineHeight","Button","maxWidth","maxHeight","minWidth","minHeight","marginLeft","onClick","EditableSpan","editMode","setEditMode","autoFocus","onDoubleClick","Todolist","changeTodolistTitle","IconButton","removeTodolist","Delete","addTask","tasks","map","t","isDone","type","taskId","newIsDoneValue","checked","changeTaskStatus","onChangeHandler","newValue","changeTaskTitle","onTitleChangeHandler","margin","removeTask","filter","color","changeFilter","TaskReducer","state","action","todolistId","el","v1","newTitle","copyState","TodoListReducer","removeTodolistAC","App","todolistId1","todolistId2","useReducer","tasksDispatch","todolists","todolistsDispatch","removeTaskAC","addTaskAC","changeStatus","changeStatusAC","changeTaskTitleAC","filterTaskAC","console","log","changeTodolistTitleAC","Box","sx","flexGrow","width","AppBar","position","Toolbar","edge","mr","Typography","component","Container","fixed","Grid","container","padding","addNewTodolistAC","spacing","tl","tasksForTodolist","item","Paper","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.980d1508.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        {/*   <input value={title}\r\n               onChange={onChangeHandler}\r\n               onKeyPress={onKeyPressHandler}\r\n               className={error ? \"error\" : \"\"}\r\n        />*/}\r\n        <TextField error={error}\r\n                   id=\"outlined-basic\"\r\n                   label=\"Title is required\"\r\n                   variant=\"outlined\"\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   onBlur={() => setError(false)}\r\n                   className={error ? \"error\" : \"\"}\r\n                   size={'small'}\r\n                   style={{lineHeight: '10px'}}/>\r\n        {/*<button onClick={addItem}>+</button>*/}\r\n        <Button style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px', marginLeft: '10px'}}\r\n                variant={\"contained\"}\r\n                size={\"small\"}\r\n                onClick={addItem}>+</Button>\r\n\r\n        {error && <div className=\"error-message\">Title is required!</div>}\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {debug} from \"util\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    //по клику на кнопку удаляем таску\r\n    const onClickHandler = (taskId: string) => {\r\n        props.removeTask(taskId, props.id)\r\n    }\r\n\r\n    //меняем таску на чекнутую и обратно\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>, taskId: string) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(taskId, newIsDoneValue, props.id);\r\n    }\r\n\r\n    //Меняем наименование таски\r\n    const onTitleChangeHandler = (taskId: string, newValue: string) => {\r\n        props.changeTaskTitle(taskId, newValue, props.id);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            {/* <button onClick={removeTodolist}>x</button>*/}\r\n            <IconButton aria-label={\"delete\"} onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={(e) => onChangeHandler(e, t.id)} checked={t.isDone}/>\r\n                        <EditableSpan value={t.title} onChange={(newValue) => onTitleChangeHandler(t.id, newValue)}/>\r\n                        {/*<button onClick={() => onClickHandler(t.id)}>x</button>*/}\r\n                        <Button style={{\r\n                            maxWidth: '30px',\r\n                            maxHeight: '30px',\r\n                            minWidth: '30px',\r\n                            minHeight: '30px',\r\n                            margin: '5px',\r\n\r\n                        }}\r\n                                variant={'contained'} size={'small'} onClick={() => onClickHandler(t.id)}>x</Button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                    color={'success'}\r\n                    onClick={onAllClickHandler}\r\n                    style={{margin: '3px'}}>All</Button>\r\n            <Button variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                    color={'error'}\r\n                    onClick={onActiveClickHandler}\r\n                    style={{margin: '3px'}}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                    style={{margin: '3px'}}>Completed</Button>\r\n\r\n            {/*<button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>*/}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import {TaskType} from \"../Todolist\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddNewTodolistACType, RemoveTodolistACType} from \"./TodoListReducer\";\r\n\r\nexport const TaskReducer = (state: TasksStateType, action: GeneralActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(el => el.id !== action.id)};\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(el => el.id === action.id ? {\r\n                    ...el,\r\n                    isDone: action.isDone\r\n                } : el)\r\n            }\r\n        }\r\n        case 'CHANGE_TASK_TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(el => el.id === action.id ? {\r\n                    ...el,\r\n                    title: action.newTitle\r\n                } : el)\r\n            }\r\n        }\r\n        case 'ADD-NEW-TODOLIST': {\r\n           return {...state, [action.todolistId]: []}\r\n        }\r\n        /*case 'ADD-NEW-TODOLIST-IN-TASKS': {\r\n            return {[action.todolistId]: [], ...state}\r\n        }*/\r\n        //здесь использовала action creator из тудулист редьюсера\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type TaskReducerType = typeof TaskReducer;\r\n\r\nexport type GeneralActionType = removeTaskACType\r\n    | addTaskACType\r\n    | changeStatusACType\r\n    | changeTaskTitleACType\r\n    //   | addNewTodolistInTasksACType\r\n    | RemoveTodolistACType\r\n    | AddNewTodolistACType\r\n//  | removeTodolistTasksACType;\r\n\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport type changeStatusACType = ReturnType<typeof changeStatusAC>\r\nexport type changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\n//export type addNewTodolistInTasksACType = ReturnType<typeof addNewTodolistInTasksAC>\r\n\r\n//export type removeTodolistTasksACType = ReturnType<typeof removeTodolistTasksAC>\r\n\r\nexport const removeTaskAC = (id: string, todolistId: string) => ({type: 'REMOVE-TASK', id, todolistId} as const);\r\nexport const addTaskAC = (title: string, todolistId: string) => ({type: 'ADD-TASK', title, todolistId} as const);\r\nexport const changeStatusAC = (id: string, isDone: boolean, todolistId: string) =>\r\n    ({type: 'CHANGE-TASK-STATUS', id, isDone, todolistId} as const);\r\nexport const changeTaskTitleAC = (id: string, newTitle: string, todolistId: string) =>\r\n    ({type: 'CHANGE_TASK_TITLE', id, newTitle, todolistId} as const);\r\n/*export const addNewTodolistInTasksAC = (todolistId: string) =>\r\n    ({type: 'ADD-NEW-TODOLIST-IN-TASKS', todolistId} as const);*/\r\n\r\n","import { v1 } from \"uuid\";\r\nimport {FilterValuesType, TodolistType} from \"../App\";\r\n\r\nexport const TodoListReducer = (state: Array<TodolistType>, action: GeneralActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'FILTER_TASKS': {\r\n            return state.map(el => el.id === action.todolistId ? {...el, filter: action.value} : el);\r\n        }\r\n        case 'ADD-NEW-TODOLIST': {\r\n            return [{id: action.todolistId, title: action.title, filter: \"all\"}, ...state]\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(el => el.id !== action.todolistId);\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(el => el.id === action.todolistId ? {...el, title: action.title} : el);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type TodoListReducerType = typeof TodoListReducer;\r\n\r\nexport type GeneralActionType = FilterTaskACType\r\n    | AddNewTodolistACType\r\n    | RemoveTodolistACType\r\n    | ChangeTodolistTitleACType;\r\n\r\n\r\nexport type FilterTaskACType = ReturnType<typeof filterTaskAC>\r\nexport type AddNewTodolistACType = ReturnType<typeof addNewTodolistAC>\r\nexport type RemoveTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport type ChangeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\n\r\nexport const filterTaskAC = (value: FilterValuesType, todolistId: string) =>\r\n    ({type: 'FILTER_TASKS', value, todolistId} as const);\r\n//раньше еще айдишку передавала сюда\r\nexport const addNewTodolistAC = ( title: string) =>\r\n    ({type: 'ADD-NEW-TODOLIST', title, todolistId: v1()} as const);\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n    ({type: 'REMOVE-TODOLIST', todolistId} as const);\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', todolistId, title}as const);\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {Container} from \"@mui/material\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {\r\n   // addNewTodolistInTasksAC,\r\n    addTaskAC,\r\n    changeStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n    //removeTodolistTasksAC,\r\n    TaskReducer,\r\n    TaskReducerType\r\n} from \"./redux/TaskReducer\";\r\nimport {\r\n    addNewTodolistAC,\r\n  //  addNewTodolistInTodolistAC,\r\n    changeTodolistTitleAC,\r\n    filterTaskAC,\r\n    removeTodolistAC,\r\n    TodoListReducer,\r\n    TodoListReducerType\r\n} from \"./redux/TodoListReducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n//export type TodoListStateType = Array<TodolistType>;\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [tasks, tasksDispatch] = useReducer<TaskReducerType>(TaskReducer, {\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    let [todolists, todolistsDispatch] = useReducer(TodoListReducer, [\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    //WWW удаление таски из тудулиста\r\n    function removeTask(id: string, todolistId: string) {\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].filter(el => el.id !== id)})\r\n        tasksDispatch(removeTaskAC(id, todolistId));\r\n    }\r\n\r\n    //WWW добавляем таску в тудулист\r\n    function addTask(title: string, todolistId: string) {\r\n        // setTasks({...tasks, [todolistId]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistId]]})\r\n        tasksDispatch(addTaskAC(title, todolistId));\r\n    }\r\n\r\n    //WWW делаем таску чекнутой либо нет\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].map(el => el.id === id ? {...el, isDone} : el)})\r\n        tasksDispatch(changeStatusAC(id, isDone, todolistId));\r\n    }\r\n\r\n    //WWW по двойному щелчку на наименование таски можем корректировать его\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].map(el => el.id === id ? {...el, title: newTitle} : el)})\r\n        tasksDispatch(changeTaskTitleAC(id, newTitle, todolistId));\r\n    }\r\n\r\n   /* //При удалении тудулиста мы должны удалить его таски в стэйте тасок\r\n    function removeTodolistTasks(todolistId: string) {\r\n       // tasksDispatch(removeTodolistTasksAC(todolistId));\r\n        tasksDispatch(removeTodolistAC(todolistId));\r\n    }*/\r\n\r\n    //WWW по нажатию одной из кнопок(под каждым тудулистом) фильтруем наши таски\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        // setTodolists(todolists.map(el => el.id === todolistId ? {...el, filter: value} : el))\r\n        todolistsDispatch(filterTaskAC(value, todolistId));\r\n    }\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!доделай\r\n    //WWW создаем новый тудулист\r\n    function addTodolist(title: string) {\r\n       // let newTodoListId = v1();\r\n        //setTodolists([{id: newTodoListId, title, filter: 'all'}, ...todolists]);\r\n        // setTasks({[newTodoListId]: [], ...tasks})\r\n\r\n       /* todolistsDispatch(addNewTodolistInTodolistAC(newTodoListId, title));\r\n        tasksDispatch(addNewTodolistInTasksAC(newTodoListId));*/\r\n\r\n        let action = addNewTodolistAC(title);\r\n\r\n        todolistsDispatch(action);\r\n       tasksDispatch(action);\r\n\r\n    }\r\n\r\n    //WWW удаляем тудулист\r\n    //еще нужно почистить таски этого тудулиста\r\n    function removeTodolist(id: string) {\r\n        // setTodolists(todolists.filter(el => el.id !== id))\r\n        todolistsDispatch(removeTodolistAC(id));\r\n\r\n        tasksDispatch(removeTodolistAC(id));\r\n\r\n        /*let copyTasks =  {...tasks};\r\n        delete copyTasks[id];\r\n        tasksDispatch()*/\r\n\r\n        console.log(tasks);\r\n        console.log(todolists);\r\n    }\r\n\r\n    //меняем наименование тудулиста по двойному щелчку\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // setTodolists(todolists.map(el => el.id === id ? {...el, title} : el))\r\ntodolistsDispatch(changeTodolistTitleAC(id, title));\r\n    }\r\n\r\n\r\n    /*let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])*/\r\n\r\n    /*let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });*/\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Box sx={{flexGrow: 1}} style={{width: '100%'}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{mr: 2}}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={7}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            /*let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;*/\r\n\r\n\r\n                            let tasksForTodolist = tasks[tl.id];\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(t => !t.isDone);\r\n                                /*tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);*/\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(t => t.isDone);\r\n                                /* tasksForTodolist = allTodolistTasks.filter(t => t.isDone);*/\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px', marginTop: '25px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}